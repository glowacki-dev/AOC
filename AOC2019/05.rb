require "forwardable"

class State
  def initialize(data)
    @data = data
    @index = 0
    @modes = []
  end

  def valid?
    @index >= 0
  end

  def current
    opcode = "%05d" % @data[@index]
    op = opcode[3..4].to_i
    @modes[0] = opcode[2].to_i
    @modes[1] = opcode[1].to_i
    @modes[2] = opcode[0].to_i
    op
  end

  def move(offset)
    @index += offset
    self
  end

  def jump(addr)
    @index = addr
    self
  end

  def a; read(0); end
  def b; read(1); end
  def c; read(2); end

  def set(param, val); store(param.to_s.ord - 97, val); end

  private

  def read(param)
    @modes[param] == 1 ? @data[@index + 1 + param] : @data[@data[@index + 1 + param]]
  end
  
  def store(offset, val)
    @data[@data[@index + 1 + offset]] = val
    self
  end
end

class Machine
  extend Forwardable
  
  def initialize(data, inputs)
    @state = State.new(data)
    @inputs = inputs
    @index = 0
    @modes = []
  end

  def run
    process while state.valid? 
  end

  private

  attr_reader :index, :state, :inputs, :modes

  def_delegators :state, :a, :b, :c

  def process
    case state.current
    when 1
      state.set(:c, a + b).move(4)
    when 2
      state.set(:c, a * b).move(4)
    when 3
      state.set(:a, inputs.shift).move(2)
    when 4
      puts a
      state.move(2)
    when 5
      a != 0 ? state.jump(b) : state.move(3)
    when 6
      a == 0 ? state.jump(b) : state.move(3)
    when 7
      state.set(:c, a < b ? 1 : 0).move(4)
    when 8
      state.set(:c, a == b ? 1 : 0).move(4)
    when 99
      state.jump(-1)
    else
      raise StandardError, "ded"
    end
  end
end

data = [
3,225,1,225,6,6,1100,1,238,225,104,0,1101,40,71,224,1001,224,-111,224,4,224,1002,223,8,223,101,7,224,224,1,224,223,223,1102,66,6,225,1102,22,54,225,1,65,35,224,1001,224,-86,224,4,224,102,8,223,223,101,6,224,224,1,224,223,223,1102,20,80,225,101,92,148,224,101,-162,224,224,4,224,1002,223,8,223,101,5,224,224,1,224,223,223,1102,63,60,225,1101,32,48,225,2,173,95,224,1001,224,-448,224,4,224,102,8,223,223,1001,224,4,224,1,224,223,223,1001,91,16,224,101,-79,224,224,4,224,1002,223,8,223,101,3,224,224,1,224,223,223,1101,13,29,225,1101,71,70,225,1002,39,56,224,1001,224,-1232,224,4,224,102,8,223,223,101,4,224,224,1,223,224,223,1101,14,59,225,102,38,143,224,1001,224,-494,224,4,224,102,8,223,223,101,3,224,224,1,224,223,223,1102,30,28,224,1001,224,-840,224,4,224,1002,223,8,223,101,4,224,224,1,223,224,223,4,223,99,0,0,0,677,0,0,0,0,0,0,0,0,0,0,0,1105,0,99999,1105,227,247,1105,1,99999,1005,227,99999,1005,0,256,1105,1,99999,1106,227,99999,1106,0,265,1105,1,99999,1006,0,99999,1006,227,274,1105,1,99999,1105,1,280,1105,1,99999,1,225,225,225,1101,294,0,0,105,1,0,1105,1,99999,1106,0,300,1105,1,99999,1,225,225,225,1101,314,0,0,106,0,0,1105,1,99999,107,677,226,224,1002,223,2,223,1005,224,329,1001,223,1,223,8,226,226,224,102,2,223,223,1006,224,344,101,1,223,223,7,226,677,224,1002,223,2,223,1005,224,359,101,1,223,223,1007,677,226,224,1002,223,2,223,1005,224,374,1001,223,1,223,1007,677,677,224,1002,223,2,223,1006,224,389,101,1,223,223,1008,226,226,224,1002,223,2,223,1005,224,404,1001,223,1,223,108,677,226,224,1002,223,2,223,1006,224,419,1001,223,1,223,1108,677,226,224,102,2,223,223,1006,224,434,1001,223,1,223,108,226,226,224,1002,223,2,223,1005,224,449,101,1,223,223,7,677,677,224,1002,223,2,223,1006,224,464,1001,223,1,223,8,226,677,224,1002,223,2,223,1005,224,479,1001,223,1,223,107,226,226,224,102,2,223,223,1006,224,494,101,1,223,223,1007,226,226,224,1002,223,2,223,1005,224,509,1001,223,1,223,1107,226,677,224,102,2,223,223,1005,224,524,1001,223,1,223,108,677,677,224,1002,223,2,223,1005,224,539,101,1,223,223,1107,677,226,224,102,2,223,223,1005,224,554,1001,223,1,223,107,677,677,224,1002,223,2,223,1005,224,569,101,1,223,223,8,677,226,224,102,2,223,223,1005,224,584,1001,223,1,223,7,677,226,224,102,2,223,223,1006,224,599,101,1,223,223,1008,677,677,224,1002,223,2,223,1005,224,614,101,1,223,223,1008,677,226,224,102,2,223,223,1006,224,629,1001,223,1,223,1108,677,677,224,102,2,223,223,1006,224,644,101,1,223,223,1108,226,677,224,1002,223,2,223,1005,224,659,1001,223,1,223,1107,226,226,224,102,2,223,223,1006,224,674,1001,223,1,223,4,223,99,226
]

inputs = [
  5
]

Machine.new(data, inputs).run
